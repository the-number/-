("0-reference.bm: reference benchmark for iteration counts" 330000 total 0.286 user 0.199 system 0 frame 0.199188 benchmark -1.880000000000166e-4 user/interp 0.199 bench/interp -1.880000000000166e-4 gc 0.0)
("arithmetic.bm: fixnum: 1+" 10000000 total 7.639 user 6.025 system 0 frame 6.036 benchmark -0.011 user/interp 6.025 bench/interp -0.011 gc 0.0)
("arithmetic.bm: fixnum: 1-" 10000000 total 7.16 user 6.007 system 0 frame 6.036 benchmark -0.029 user/interp 6.007 bench/interp -0.029 gc 0.0)
("arithmetic.bm: fixnum: +" 10000000 total 7.462 user 6.025 system 0 frame 6.036 benchmark -0.011 user/interp 6.025 bench/interp -0.011 gc 0.0)
("arithmetic.bm: fixnum: -" 10000000 total 7.603 user 6.035 system 0 frame 6.036 benchmark -0.001 user/interp 6.035 bench/interp -0.001 gc 0.0)
("arithmetic.bm: fixnum: *" 10000000 total 7.667 user 6.043 system 0 frame 6.036 benchmark 0.007 user/interp 6.043 bench/interp 0.007 gc 0.0)
("arithmetic.bm: fixnum: /" 10000000 total 7.933 user 6.048 system 0 frame 6.036 benchmark 0.012 user/interp 6.048 bench/interp 0.012 gc 0.0)
("bytevector-io.bm: bytevector i/o: put-bytevector" 4000 total 18.305 user 8.681 system 0 frame 0.0024143999999996597 benchmark 8.6785856 user/interp 8.179 bench/interp 8.176585600000001 gc 0.502)
("bytevector-io.bm: bytevector i/o: get-bytevector-n!" 20000 total 33.235 user 25.338 system 0 frame 0.012072000000000116 benchmark 25.325928 user/interp 21.784 bench/interp 21.771928 gc 3.554)
("bytevector-io.bm: bytevector i/o: get-bytevector-n" 20000 total 35.463 user 26.143 system 0 frame 0.012072000000000116 benchmark 26.130928 user/interp 22.245 bench/interp 22.232928 gc 3.898)
("bytevectors.bm: ref/set!: bytevector-u8-ref" 1000000 total 1.177 user 1.001 system 0 frame 0.6036 benchmark 0.3974 user/interp 1.001 bench/interp 0.3974 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u16-ref (foreign)" 1000000 total 2.34 user 1.985 system 0 frame 0.6035999999999999 benchmark 1.3814000000000002 user/interp 1.985 bench/interp 1.3814000000000002 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u16-ref (native)" 1000000 total 2.338 user 1.97 system 0 frame 0.6035999999999999 benchmark 1.3664 user/interp 1.97 bench/interp 1.3664 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u16-native-ref" 1000000 total 1.187 user 0.999 system 0 frame 0.6036 benchmark 0.3954 user/interp 0.999 bench/interp 0.3954 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u32-ref (foreign)" 1000000 total 5.344 user 4.504 system 0 frame 0.6035999999999999 benchmark 3.9004000000000003 user/interp 4.504 bench/interp 3.9004000000000003 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u32-ref (native)" 1000000 total 5.017 user 4.143 system 0 frame 0.6035999999999999 benchmark 3.5394 user/interp 4.143 bench/interp 3.5394 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u32-native-ref" 1000000 total 1.369 user 1.136 system 0 frame 0.6036 benchmark 0.5324 user/interp 1.136 bench/interp 0.5324 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u64-ref (foreign)" 1000000 total 6.362 user 5.301 system 0 frame 0.6036000000000004 benchmark 4.6974 user/interp 5.301 bench/interp 4.6974 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u64-ref (native)" 1000000 total 6.933 user 5.583 system 0 frame 0.6036000000000004 benchmark 4.9794 user/interp 5.583 bench/interp 4.9794 gc 0.0)
("bytevectors.bm: ref/set!: bytevector-u64-native-ref" 1000000 total 1.32 user 1.005 system 0 frame 0.6036 benchmark 0.4014 user/interp 1.005 bench/interp 0.4014 gc 0.0)
("bytevectors.bm: lists: bytevector->u8-list" 2000 total 26.491 user 20.998 system 0 frame 0.0012072000000007393 benchmark 20.996792799999998 user/interp 8.393 bench/interp 8.3917928 gc 12.605)
("bytevectors.bm: lists: bytevector->uint-list 16-bit" 2000 total 12.016 user 10.411 system 0 frame 0.0012072000000007393 benchmark 10.4097928 user/interp 4.381 bench/interp 4.379792799999999 gc 6.03)
("bytevectors.bm: lists: bytevector->uint-list 64-bit" 2000 total 12.586 user 10.896 system 0 frame 0.0012072000000007393 benchmark 10.8947928 user/interp 9.356 bench/interp 9.354792799999998 gc 1.54)
("bytevectors.bm: SRFI-4: u8vector-ref" 1000000 total 1.149 user 0.999 system 0 frame 0.6036 benchmark 0.3954 user/interp 0.999 bench/interp 0.3954 gc 0.0)
("bytevectors.bm: SRFI-4: u16vector-ref" 1000000 total 1.166 user 0.997 system 0 frame 0.6036 benchmark 0.39339999999999997 user/interp 0.997 bench/interp 0.39339999999999997 gc 0.0)
("bytevectors.bm: SRFI-4: u32vector-ref" 1000000 total 1.323 user 1.131 system 0 frame 0.6036 benchmark 0.5274 user/interp 1.131 bench/interp 0.5274 gc 0.0)
("bytevectors.bm: SRFI-4: u64vector-ref" 1000000 total 16.616 user 13.687 system 0 frame 0.6036000000000004 benchmark 13.0834 user/interp 9.147 bench/interp 8.5434 gc 4.54)
("chars.bm: chars: char" 1000000 total 0.714 user 0.602 system 0 frame 0.6036 benchmark -0.0016000000000000228 user/interp 0.602 bench/interp -0.0016000000000000228 gc 0.0)
("chars.bm: chars: octal" 1000000 total 0.724 user 0.602 system 0 frame 0.6036 benchmark -0.0016000000000000228 user/interp 0.602 bench/interp -0.0016000000000000228 gc 0.0)
("chars.bm: chars: char? eq" 1000000 total 0.748 user 0.604 system 0 frame 0.6036 benchmark 3.9999999999997725e-4 user/interp 0.604 bench/interp 3.9999999999997725e-4 gc 0.0)
("chars.bm: chars: char=?" 1000000 total 1.502 user 1.28 system 0 frame 0.6036 benchmark 0.6764 user/interp 1.28 bench/interp 0.6764 gc 0.0)
("chars.bm: chars: char<?" 1000000 total 1.498 user 1.283 system 0 frame 0.6036 benchmark 0.6794 user/interp 1.283 bench/interp 0.6794 gc 0.0)
("chars.bm: chars: char-ci=?" 1000000 total 1.52 user 1.284 system 0 frame 0.6036 benchmark 0.6804 user/interp 1.284 bench/interp 0.6804 gc 0.0)
("chars.bm: chars: char-ci<? " 1000000 total 1.513 user 1.286 system 0 frame 0.6036 benchmark 0.6824 user/interp 1.286 bench/interp 0.6824 gc 0.0)
("chars.bm: chars: char->integer" 1000000 total 0.796 user 0.607 system 0 frame 0.6036 benchmark 0.0033999999999999773 user/interp 0.607 bench/interp 0.0033999999999999773 gc 0.0)
("chars.bm: chars: char-alphabetic?" 1000000 total 1.716 user 1.425 system 0 frame 0.6036 benchmark 0.8214 user/interp 1.425 bench/interp 0.8214 gc 0.0)
("chars.bm: chars: char-numeric?" 1000000 total 1.744 user 1.402 system 0 frame 0.6036 benchmark 0.7984 user/interp 1.402 bench/interp 0.7984 gc 0.0)
("continuations.bm: call/cc" 12000 total 2.547 user 2.033 system 0 frame 0.007243199999999888 benchmark 2.0257568 user/interp 0.52 bench/interp 0.5127568000000001 gc 1.513)
("hash.bm: string-hash: narrow string" 100000 total 36.851 user 29.983 system 0 frame 0.06036000000000058 benchmark 29.922639999999998 user/interp 29.983 bench/interp 29.922639999999998 gc 0.0)
("hash.bm: string-hash: wide string" 100000 total 34.791 user 27.881 system 0 frame 0.06036000000000058 benchmark 27.82064 user/interp 27.881 bench/interp 27.82064 gc 0.0)
("hash.bm: string-hash: long string" 100000 total 67.444 user 54.582 system 0 frame 0.06036000000000058 benchmark 54.52164 user/interp 54.582 bench/interp 54.52164 gc 0.0)
("if.bm: if-<expr>-then-else: executing then" 330000 total 0.231 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<expr>-then-else: executing else" 330000 total 0.233 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<expr>-then: executing then" 330000 total 0.222 user 0.2 system 0 frame 0.199188 benchmark 8.119999999999834e-4 user/interp 0.2 bench/interp 8.119999999999834e-4 gc 0.0)
("if.bm: if-<expr>-then: executing else" 330000 total 0.228 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<iloc>-then-else: executing then" 330000 total 0.233 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<iloc>-then-else: executing else" 330000 total 0.233 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<iloc>-then: executing then" 330000 total 0.237 user 0.197 system 0 frame 0.199188 benchmark -0.0021880000000000168 user/interp 0.197 bench/interp -0.0021880000000000168 gc 0.0)
("if.bm: if-<iloc>-then: executing else" 330000 total 0.224 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<bool>-then-else: executing then" 330000 total 0.231 user 0.199 system 0 frame 0.199188 benchmark -1.880000000000166e-4 user/interp 0.199 bench/interp -1.880000000000166e-4 gc 0.0)
("if.bm: if-<bool>-then-else: executing else" 330000 total 0.234 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<bool>-then: executing then" 330000 total 0.235 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("if.bm: if-<bool>-then: executing else" 330000 total 0.228 user 0.198 system 0 frame 0.199188 benchmark -0.0011880000000000165 user/interp 0.198 bench/interp -0.0011880000000000165 gc 0.0)
("logand.bm: bignum" 130000 total 2.09 user 1.664 system 0 frame 0.07846800000000008 benchmark 1.585532 user/interp 1.251 bench/interp 1.172532 gc 0.413)
("ports.bm: peek-char: latin-1 port" 700 total 0.823 user 0.82 system 0 frame 4.2251999999996315e-4 benchmark 0.8195774800000001 user/interp 0.82 bench/interp 0.8195774800000001 gc 0.0)
("ports.bm: peek-char: utf-8 port, ascii character" 700 total 0.897 user 0.891 system 0 frame 4.2251999999996315e-4 benchmark 0.89057748 user/interp 0.891 bench/interp 0.89057748 gc 0.0)
("ports.bm: peek-char: utf-8 port, Korean character" 700 total 0.996 user 0.992 system 0 frame 4.2251999999996315e-4 benchmark 0.99157748 user/interp 0.992 bench/interp 0.99157748 gc 0.0)
("ports.bm: char-ready?: latin-1 port" 10000 total 10.317 user 10.263 system 0 frame 0.006036000000000058 benchmark 10.256964 user/interp 10.263 bench/interp 10.256964 gc 0.0)
("ports.bm: char-ready?: utf-8 port, ascii character" 10000 total 9.78 user 9.73 system 0 frame 0.006036000000000058 benchmark 9.723964 user/interp 9.73 bench/interp 9.723964 gc 0.0)
("ports.bm: char-ready?: utf-8 port, Korean character" 10000 total 10.191 user 10.127 system 0 frame 0.006036000000000058 benchmark 10.120964 user/interp 10.127 bench/interp 10.120964 gc 0.0)
("ports.bm: read-char: latin-1 port" 10000 total 34.772 user 34.623 system 0 frame 0.006036000000000058 benchmark 34.616964 user/interp 34.623 bench/interp 34.616964 gc 0.0)
("ports.bm: read-char: utf-8 port, ascii character" 10000 total 37.273 user 36.871 system 0 frame 0.006036000000000058 benchmark 36.864964 user/interp 36.871 bench/interp 36.864964 gc 0.0)
("ports.bm: read-char: utf-8 port, Korean character" 10000 total 37.272 user 37.1 system 0 frame 0.006036000000000058 benchmark 37.093964 user/interp 37.1 bench/interp 37.093964 gc 0.0)
("ports.bm: rdelim: read-line" 1000 total 13.946 user 13.862 system 0 frame 6.036000000003696e-4 benchmark 13.8613964 user/interp 12.991 bench/interp 12.9903964 gc 0.871)
("ports.bm: rdelim: read-string" 200 total 109.056 user 108.584 system 0 frame 1.2072000000625849e-4 benchmark 108.58387927999999 user/interp 104.696 bench/interp 104.69587928 gc 3.888)
("r6rs-arithmetic.bm: fixnum: fixnum? [yes]" 10000000 total 21.908 user 21.817 system 0 frame 6.036 benchmark 15.781 user/interp 21.817 bench/interp 15.781 gc 0.0)
("r6rs-arithmetic.bm: fixnum: fixnum? [no]" 10000000 total 24.991 user 24.896 system 0 frame 6.036 benchmark 18.86 user/interp 24.896 bench/interp 18.86 gc 0.0)
("r6rs-arithmetic.bm: fixnum: fxxor [2]" 10000000 total 33.713 user 33.582 system 0 frame 6.036 benchmark 27.546 user/interp 33.582 bench/interp 27.546 gc 0.0)
("read.bm: read: 'none" 5 total 43.145 user 42.932 system 0 frame 3.018000003066845e-6 benchmark 42.931996981999994 user/interp 41.624 bench/interp 41.623996981999994 gc 1.308)
("read.bm: read: 'line" 10 total 30.562 user 30.295 system 0 frame 6.035999998857733e-6 benchmark 30.294993964 user/interp 27.39 bench/interp 27.389993964000002 gc 2.905)
("read.bm: read: 'block 4096" 10 total 30.507 user 30.354 system 0 frame 6.035999998857733e-6 benchmark 30.353993964 user/interp 27.445 bench/interp 27.444993964000002 gc 2.909)
("read.bm: read: 'block 8192" 10 total 30.867 user 30.714 system 0 frame 6.035999998857733e-6 benchmark 30.713993964 user/interp 27.762 bench/interp 27.761993964000002 gc 2.952)
("read.bm: read: 'block 16384" 10 total 30.715 user 30.562 system 0 frame 6.035999998857733e-6 benchmark 30.561993964000003 user/interp 27.564 bench/interp 27.563993964 gc 2.998)
("read.bm: read: small strings" 100000 total 24.556 user 24.431 system 0 frame 0.06036000000000058 benchmark 24.370639999999998 user/interp 15.812 bench/interp 15.75164 gc 8.619)
("read.bm: read: large strings" 100000 total 424.53 user 422.282 system 0 frame 0.06035999999998603 benchmark 422.22164000000004 user/interp 359.827 bench/interp 359.76664 gc 62.455)
("srfi-1.bm: fold: big" 30 total 24.56 user 24.447 system 0 frame 1.810800000021118e-5 benchmark 24.446981892 user/interp 24.447 bench/interp 24.446981892 gc 0.0)
("srfi-1.bm: fold: small" 2000000 total 21.404 user 21.319 system 0 frame 1.2072000000000007 benchmark 20.1118 user/interp 21.319 bench/interp 20.1118 gc 0.0)
("srfi-1.bm: drop-while: big" 30 total 25.563 user 25.44 system 0 frame 1.810800000021118e-5 benchmark 25.439981892 user/interp 25.44 bench/interp 25.439981892 gc 0.0)
("srfi-1.bm: drop-while: small" 2000000 total 20.494 user 20.412 system 0 frame 1.2072000000000007 benchmark 19.2048 user/interp 20.412 bench/interp 19.2048 gc 0.0)
("srfi-1.bm: map: big" 30 total 62.766 user 62.419 system 0 frame 1.81079999965732e-5 benchmark 62.418981892000005 user/interp 51.717 bench/interp 51.71698189200001 gc 10.702)
("srfi-1.bm: map: small" 2000000 total 35.214 user 35.032 system 0 frame 1.2071999999999972 benchmark 33.8248 user/interp 30.48 bench/interp 29.272800000000004 gc 4.552)
("srfi-1.bm: for-each: big" 30 total 25.306 user 25.184 system 0 frame 1.810800000021118e-5 benchmark 25.183981892 user/interp 25.184 bench/interp 25.183981892 gc 0.0)
("srfi-1.bm: for-each: small" 2000000 total 21.288 user 21.208 system 0 frame 1.2072000000000007 benchmark 20.000799999999998 user/interp 21.208 bench/interp 20.000799999999998 gc 0.0)
("srfi-13.bm: strings: predicates: string?" 1190000 total 0.892 user 0.889 system 0 frame 0.718284 benchmark 0.170716 user/interp 0.889 bench/interp 0.170716 gc 0.0)
("srfi-13.bm: strings: predicates: null?" 969000 total 2.714 user 2.706 system 0 frame 0.5848883999999999 benchmark 2.1211116000000003 user/interp 2.706 bench/interp 2.1211116000000003 gc 0.0)
("srfi-13.bm: strings: predicates: any" 94000 total 1.73 user 1.722 system 0 frame 0.05673839999999995 benchmark 1.6652616 user/interp 1.722 bench/interp 1.6652616 gc 0.0)
("srfi-13.bm: strings: predicates: every" 94000 total 1.279 user 1.273 system 0 frame 0.05673839999999995 benchmark 1.2162616 user/interp 1.273 bench/interp 1.2162616 gc 0.0)
("srfi-13.bm: strings: constructors: string" 5000 total 2.554 user 2.535 system 0 frame 0.003018000000000029 benchmark 2.531982 user/interp 1.144 bench/interp 1.140982 gc 1.391)
("srfi-13.bm: strings: constructors: list->" 4500 total 0.312 user 0.312 system 0 frame 0.002716200000000015 benchmark 0.3092838 user/interp 0.312 bench/interp 0.3092838 gc 0.0)
("srfi-13.bm: strings: constructors: reverse-list->" 5000 total 0.611 user 0.608 system 0 frame 0.003018000000000029 benchmark 0.604982 user/interp 0.608 bench/interp 0.604982 gc 0.0)
("srfi-13.bm: strings: constructors: make" 22000 total 0.495 user 0.493 system 0 frame 0.013279200000000003 benchmark 0.4797208 user/interp 0.493 bench/interp 0.4797208 gc 0.0)
("srfi-13.bm: strings: constructors: tabulate" 17000 total 7.526 user 7.495 system 0 frame 0.010261199999999917 benchmark 7.4847388 user/interp 7.264 bench/interp 7.2537388 gc 0.231)
("srfi-13.bm: strings: constructors: join" 5500 total 0.321 user 0.319 system 0 frame 0.0033197999999999865 benchmark 0.3156802 user/interp 0.087 bench/interp 0.08368020000000001 gc 0.232)
("srfi-13.bm: strings: list/string: ->list" 7300 total 4.565 user 4.534 system 0 frame 0.004406280000000152 benchmark 4.52959372 user/interp 2.67 bench/interp 2.66559372 gc 1.864)
("srfi-13.bm: strings: list/string: split" 60000 total 2.466 user 2.455 system 0 frame 0.036215999999999894 benchmark 2.418784 user/interp 1.762 bench/interp 1.7257840000000002 gc 0.693)
("srfi-13.bm: strings: selection: ref" 660 total 0.322 user 0.321 system 0 frame 3.9837599999998475e-4 benchmark 0.32060162400000003 user/interp 0.321 bench/interp 0.32060162400000003 gc 0.0)
("srfi-13.bm: strings: selection: copy" 20000 total 1.474 user 1.466 system 0 frame 0.012071999999999888 benchmark 1.453928 user/interp 0.55 bench/interp 0.5379280000000001 gc 0.916)
("srfi-13.bm: strings: selection: pad" 34000 total 1.375 user 1.366 system 0 frame 0.020522400000000062 benchmark 1.3454776 user/interp 0.899 bench/interp 0.8784776 gc 0.467)
("srfi-13.bm: strings: selection: trim trim-right trim-both" 60000 total 10.386 user 10.332 system 0 frame 0.03621600000000035 benchmark 10.295784 user/interp 10.103 bench/interp 10.066784 gc 0.229)
("srfi-13.bm: strings: modification: set!" 3000 total 0.386 user 0.385 system 0 frame 0.001810799999999972 benchmark 0.3831892 user/interp 0.385 bench/interp 0.3831892 gc 0.0)
("srfi-13.bm: strings: modification: sub-move!" 230000 total 1.595 user 1.591 system 0 frame 0.13882799999999998 benchmark 1.452172 user/interp 1.591 bench/interp 1.452172 gc 0.0)
("srfi-13.bm: strings: modification: fill!" 230000 total 1.898 user 1.89 system 0 frame 0.13882799999999998 benchmark 1.751172 user/interp 1.89 bench/interp 1.751172 gc 0.0)
("srfi-13.bm: strings: modification: comparison: compare compare-ci" 140000 total 2.586 user 2.578 system 0 frame 0.0845039999999999 benchmark 2.493496 user/interp 2.578 bench/interp 2.493496 gc 0.0)
("srfi-13.bm: strings: modification: comparison: hash hash-ci" 1000 total 0.244 user 0.241 system 0 frame 6.036000000000001e-4 benchmark 0.2403964 user/interp 0.241 bench/interp 0.2403964 gc 0.0)
("srfi-13.bm: strings: searching: prefix-length suffix-length" 270 total 0.517 user 0.515 system 0 frame 1.6297199999996793e-4 benchmark 0.5148370280000001 user/interp 0.515 bench/interp 0.5148370280000001 gc 0.0)
("srfi-13.bm: strings: searching: prefix? suffix?" 270 total 0.518 user 0.516 system 0 frame 1.6297199999996793e-4 benchmark 0.5158370280000001 user/interp 0.516 bench/interp 0.5158370280000001 gc 0.0)
("srfi-13.bm: strings: searching: index index-right rindex" 100000 total 4.0 user 3.981 system 0 frame 0.06036000000000013 benchmark 3.9206399999999997 user/interp 3.981 bench/interp 3.9206399999999997 gc 0.0)
("srfi-13.bm: strings: searching: skip skip-right?" 100000 total 7.943 user 7.913 system 0 frame 0.06035999999999967 benchmark 7.85264 user/interp 7.913 bench/interp 7.85264 gc 0.0)
("srfi-13.bm: strings: searching: count" 10000 total 45.107 user 44.921 system 0 frame 0.006036000000000058 benchmark 44.914964 user/interp 44.921 bench/interp 44.914964 gc 0.0)
("srfi-13.bm: strings: searching: contains contains-ci" 34000 total 6.202 user 6.169 system 0 frame 0.020522399999999833 benchmark 6.1484776000000005 user/interp 6.169 bench/interp 6.1484776000000005 gc 0.0)
("srfi-13.bm: strings: searching: upcase downcase upcase! downcase!" 600 total 0.27 user 0.269 system 0 frame 3.621600000000171e-4 benchmark 0.26863783999999996 user/interp 0.269 bench/interp 0.26863783999999996 gc 0.0)
("srfi-13.bm: strings: readers: read token, method 1" 1200 total 0.338 user 0.337 system 0 frame 7.243199999999774e-4 benchmark 0.33627568 user/interp 0.337 bench/interp 0.33627568 gc 0.0)
("srfi-13.bm: strings: readers: read token, method 2" 1200 total 3.802 user 3.782 system 0 frame 7.243199999998069e-4 benchmark 3.7812756800000002 user/interp 3.323 bench/interp 3.32227568 gc 0.459)
("strings.bm: string ops: short Latin1: compare initially differing strings" 100000 total 0.424 user 0.422 system 0 frame 0.06036000000000001 benchmark 0.36163999999999996 user/interp 0.422 bench/interp 0.36163999999999996 gc 0.0)
("strings.bm: string ops: short Latin1: compare medially differing strings" 100000 total 0.55 user 0.55 system 0 frame 0.06036000000000001 benchmark 0.48963999999999996 user/interp 0.55 bench/interp 0.48963999999999996 gc 0.0)
("strings.bm: string ops: short Latin1: compare terminally differing strings" 100000 total 0.647 user 0.644 system 0 frame 0.06036000000000001 benchmark 0.5836399999999999 user/interp 0.644 bench/interp 0.5836399999999999 gc 0.0)
("strings.bm: string ops: short Latin1: compare identical strings" 100000 total 0.643 user 0.641 system 0 frame 0.06036000000000001 benchmark 0.5806399999999999 user/interp 0.641 bench/interp 0.5806399999999999 gc 0.0)
("strings.bm: string ops: short Latin1: case compare initially differing strings" 100000 total 0.601 user 0.598 system 0 frame 0.06036000000000001 benchmark 0.53764 user/interp 0.598 bench/interp 0.53764 gc 0.0)
("strings.bm: string ops: short Latin1: case compare medially differing strings" 100000 total 1.056 user 1.051 system 0 frame 0.06036000000000001 benchmark 0.99064 user/interp 1.051 bench/interp 0.99064 gc 0.0)
("strings.bm: string ops: short Latin1: case compare terminally differing strings" 100000 total 1.395 user 1.39 system 0 frame 0.0603599999999999 benchmark 1.3296400000000002 user/interp 1.39 bench/interp 1.3296400000000002 gc 0.0)
("strings.bm: string ops: short Latin1: case compare identical strings" 100000 total 1.371 user 1.366 system 0 frame 0.0603599999999999 benchmark 1.3056400000000001 user/interp 1.366 bench/interp 1.3056400000000001 gc 0.0)
